<?php

namespace calderawp\caldera\WordPressPlugin\Tests\Unit;

use calderawp\caldera\Core\CalderaCore;
use calderawp\caldera\restApi\Endpoints\Form\GetForms;
use calderawp\caldera\restApi\Response;
use calderawp\caldera\WordPressPlugin\CalderaWordPressPlugin;
use calderawp\caldera\WordPressPlugin\Contracts\CalderaWordPressPluginContract;
use calderawp\caldera\WordPressPlugin\RestApi;
use calderawp\CalderaContainers\Service\Container;
use calderawp\interop\Contracts\Rest\Endpoint as EndpointContract;

class RestApiTest extends UnitTestCase
{

	protected $called;

	public function setUp()
	{
		$this->called = false;
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	/**
	 * @covers \calderawp\caldera\WordPressPlugin\RestApi::registerRouteWithWordPress()
	 */
	public function testRegisterWithWordPress()
	{

		$module = $this->module();
		$restApi = new RestApi($module,function(){
			$this->called = true;
		});
		$endpoint = new GetForms($module->getCore()->getRestApi());
		$restApi->registerRouteWithWordPress($endpoint);
		$this->assertTrue($this->called);

	}

	/**
	 * @covers \calderawp\caldera\WordPressPlugin\RestApi::wpArgs()
	 */
	public function testWpArgs()
	{
		$module = $this->module();
		$restApi = new RestApi($module,function(){
			$this->called = true;
		});
		$args = [
			'hi' => [
				'type' => 'string',
				'default' => 'roy'
			]
		];
		$endpoint = \Mockery::mock('getSomething', EndpointContract::class );
		$endpoint
			->shouldReceive( 'getHttpMethod' )
			->andReturn( 'POST' );
		$endpoint
			->shouldReceive('getArgs' )
			->andReturn( $args );
		$wpArgs = $restApi->wpArgs($endpoint);
		$this->assertSame($args, $wpArgs['args' ] );
		$this->assertSame('POST', $wpArgs['methods' ] );
		$this->assertIsCallable( $wpArgs['callback'] );
		$this->assertIsCallable( $wpArgs['permission_callback'] );

	}



	protected function module(): CalderaWordPressPluginContract
	{
		return new CalderaWordPressPlugin(new CalderaCore(new Container()), new Container());
	}
}
